{"version":3,"sources":["components/Toolbar/Toolbar.js","components/Converter/Converter.js","App.js","serviceWorker.js","index.js"],"names":["toolbar","props","className","href","converter","state","currencies","base","amount","convertTo","result","date","handleSelect","e","setState","target","name","value","calculate","fetch","then","res","json","data","rates","toFixed","this","onChange","map","currency","key","Component","App","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oRAkBeA,G,MAfC,SAAAC,GAAK,OACnB,4BAAQC,UAAU,WAChB,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,iBAAgB,uBAAGC,KAAK,KAAR,uBAC/B,yBAAKD,UAAU,WACf,yBAAKA,UAAU,4BACb,4BACE,4BAAI,uBAAGC,KAAK,KAAR,YACJ,4BAAI,uBAAGA,KAAK,KAAR,kB,OCsDCC,G,kNA7DbC,MAAQ,CACNC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAM,OAC/CC,KAAM,MACNC,OAAQ,IACRC,UAAW,MACXC,OAAQ,GACRC,KAAM,I,EAGRC,aAAe,SAAAC,GAAM,IAAD,EAClB,EAAKC,UAAL,mBAEKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,OAF9B,uBAGY,MAHZ,GAKE,EAAKC,Y,EAITA,UAAY,WACV,IAAMV,EAAS,EAAKH,MAAMG,OAC1BW,MAAM,+CAAD,OAAgD,EAAKd,MAAME,OAC7Da,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMZ,EAAOY,EAAKZ,KACZD,GAAUa,EAAKC,MAAM,EAAKnB,MAAMI,WAAaD,GAAQiB,QAAQ,GACnE,EAAKX,SAAS,CACZJ,SACAC,a,uDAKE,IAAD,EACqDe,KAAKrB,MAA1DC,EADA,EACAA,WAAYC,EADZ,EACYA,KAAMC,EADlB,EACkBA,OAAQC,EAD1B,EAC0BA,UAAWC,EADrC,EACqCA,OAAQC,EAD7C,EAC6CA,KACpD,OACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,2BAAIM,EAAJ,IAAaD,EAAb,qBAAqCG,EAArC,IAA8CD,GAC9C,yBAAKP,UAAU,OACb,yBAAKA,UAAU,OACb,4BACEc,KAAK,YACLC,MAAOR,EACPkB,SAAUD,KAAKd,aACfV,UAAU,gBACTI,EAAWsB,KAAI,SAAAC,GAAQ,OACxB,4BAAQC,IAAKD,EAAUZ,MAAOY,GAAWA,SAK/C,oCAAUlB,U,GAtDEoB,cCeTC,E,uKAXX,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,0BAAM+B,MAAO,CAACC,UAAW,SACvB,kBAAC,EAAD,Y,GANQH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.059eb6ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Toolbar.css';\r\n\r\nconst toolbar = props => (\r\n  <header className=\"toolbar\">\r\n    <nav className=\"toolbar__navigation\">\r\n      <div className=\"toolbar__logo\"><a href=\"/\">CURRENCY CONVERTER</a></div>\r\n      <div className=\"spacer\"></div>\r\n      <div className=\"toolbar_navigation-items\">\r\n        <ul>\r\n          <li><a href=\"/\">Sign in</a></li>\r\n          <li><a href=\"/\">Sign up</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default toolbar;","import React, {Component} from 'react';\r\nimport './Converter.css'\r\n\r\nclass converter extends Component {\r\n  state = {\r\n    currencies: [\"RUB\", \"USD\", \"EUR\", \"HKD\", \"JPY\",\"CAD\"],\r\n    base: \"RUB\",\r\n    amount: \"1\",\r\n    convertTo: \"USD\",\r\n    result: \"\",\r\n    date: \"\"\r\n  };\r\n\r\n  handleSelect = e => {\r\n    this.setState(\r\n      {\r\n        [e.target.name]: e.target.value,\r\n        result: null\r\n      },\r\n      this.calculate\r\n    );\r\n  };\r\n\r\n  calculate = () => {\r\n    const amount = this.state.amount;\r\n    fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const date = data.date;\r\n        const result = (data.rates[this.state.convertTo] * amount).toFixed(4);\r\n        this.setState({\r\n          result,\r\n          date\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const {currencies, base, amount, convertTo, result, date} = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"card-body\">\r\n            <p>{amount} {base} is equavalent to {result} {convertTo}</p>\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <select \r\n                  name=\"convertTo\" \r\n                  value={convertTo} \r\n                  onChange={this.handleSelect}\r\n                  className=\"form-control\">\r\n                  {currencies.map(currency => \r\n                  <option key={currency} value={currency}>{currency}</option>\r\n                  )}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <p>As of {date}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default converter;","import React, { Component } from 'react';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport Converter from './components/Converter/Converter';\n/*import './App.css';*/\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Toolbar />\n        <main style={{marginTop: '64px'}}>\n          <Converter />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}